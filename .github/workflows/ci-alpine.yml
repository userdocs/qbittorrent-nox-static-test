# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition
name: ci - alpine

on:
  workflow_call:
    inputs:
      artifacts:
        type: string
      workflows:
        type: string
      debug:
        type: string
      upx:
        type: string
      custom:
        type: string

jobs:
  bootstrap:
    if: inputs.artifacts == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq -y

      - name: Download Assets
        run: |
          mapfile -t assets < <(curl -sL "https://api.github.com/repos/userdocs/qbt-workflow-files/releases/latest" | jq -r ".assets | .[].browser_download_url")
          for urls in "${assets[@]}"; do
              curl -sLO "${urls}"
          done

      - uses: actions/upload-artifact@v4
        with:
          path: "*.tar.xz"

  build:
    needs: bootstrap
    runs-on: ubuntu-latest

    name: "${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}libtorrent-v${{ matrix.qbt_libtorrent_version }}"

    env:
      qbt_build_dir: "qbt-build"

    steps:
      - name: Checkout ${{ github.event.inputs.distinct_id }}
        uses: actions/checkout@v4

      - name: Host - phased updates ${{ github.event.inputs.distinct_id }}
        run: printf '%s\n' 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - update ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get update

      - name: Host - upgrade ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support ${{ github.event.inputs.distinct_id }}
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Host - artifacts - create build dir ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        run: mkdir -p ${{ env.qbt_build_dir }}

      - name: Host - artifacts - Download all ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        uses: actions/download-artifact@v4

      - name: Host - artifacts - organise libtorrent files ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        run: |

          libtorrent_1_2_github_tag="$(git ls-remote -q -t --refs "https://github.com/arvidn/libtorrent.git" | awk '/\/v1/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          libtorrent_2_0_github_tag="$(git ls-remote -q -t --refs "https://github.com/arvidn/libtorrent.git" | awk '/\/v2/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"

          if [[ "${{ matrix.qbt_libtorrent_version }}" =~ ^1\.2 ]]; then
              mv -f artifact/libtorrent.${libtorrent_1_2_github_tag/v/}.tar.xz artifact/libtorrent.tar.xz
              rm -f artifact/libtorrent.${libtorrent_2_0_github_tag/v/}.tar.xz
          fi

          if [[ "${{ matrix.qbt_libtorrent_version }}" =~ ^2\.0 ]]; then
              mv -f artifact/libtorrent.${libtorrent_2_0_github_tag/v/}.tar.xz artifact/libtorrent.tar.xz
              rm -f artifact/libtorrent.${libtorrent_1_2_github_tag/v/}.tar.xz
          fi

      - name: Host - artifacts - organise qt files ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        run: |
          if [[ "${{ matrix.qbt_qt_version }}" =~ ^5 ]]; then
              mv -f artifact/qt5base.tar.xz artifact/qtbase.tar.xz
              mv -f artifact/qt5tools.tar.xz artifact/qttools.tar.xz
              rm -f artifact/qt6base.tar.xz artifact/qt6tools.tar.xz
          fi

          if [[ "${{ matrix.qbt_qt_version }}" =~ ^6 ]]; then
              mv -f artifact/qt6base.tar.xz artifact/qtbase.tar.xz
              mv -f artifact/qt6tools.tar.xz artifact/qttools.tar.xz
              rm -f artifact/qt5base.tar.xz artifact/qt5tools.tar.xz
          fi

      - name: Host - artifacts - Move organised artifacts to ${{ env.qbt_build_dir }} ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        run: mv -f artifact/* ${{ env.qbt_build_dir }}

      - name: Host - artifacts - Display structure of downloaded artifacts workspace ${{ github.event.inputs.distinct_id }}
        if: inputs.artifacts == 'true'
        run: ls -R

      - name: Host - Create Docker template env file ${{ github.event.inputs.distinct_id }}
        run: |
          printf '%s\n' "qbt_libtorrent_version=${{ matrix.qbt_libtorrent_version }}" > env.custom
          printf '%s\n' "qbt_qt_version=${{ matrix.qbt_qt_version }}" >> env.custom
          printf '%s\n' "qbt_build_tool=${{ matrix.qbt_build_tool }}" >> env.custom
          printf '%s\n' "qbt_cross_name=${{ matrix.qbt_cross_name }}" >> env.custom
          printf '%s\n' "qbt_patches_url=${{ github.repository }}" >> env.custom
          printf '%s\n' "qbt_skip_icu=${{ matrix.qbt_skip_icu }}" >> env.custom
          printf '%s\n' "qbt_boost_tag=${{ matrix.qbt_boost_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_tag=${{ matrix.qbt_libtorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_qt_tag=${{ matrix.qbt_qt_tag }}" >> env.custom
          printf '%s\n' "qbt_qbittorrent_tag=${{ matrix.qbt_qbittorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_master_jamfile=${{ matrix.qbt_libtorrent_master_jamfile }}" >> env.custom
          printf '%s\n' "qbt_workflow_files=${{ matrix.qbt_workflow_files }}" >> env.custom
          printf '%s\n' "qbt_workflow_artifacts=${{ matrix.qbt_workflow_artifacts }}" >> env.custom
          printf '%s\n' "qbt_cache_dir=${{ matrix.qbt_cache_dir }}" >> env.custom
          printf '%s\n' "qbt_optimise_strip=${{ matrix.qbt_optimise_strip }}" >> env.custom
          printf '%s\n' "qbt_build_debug=${{ matrix.qbt_build_debug }}" >> env.custom
          printf '%s\n' "qbt_revision_url=${{ github.repository }}" >> env.custom
          printf '%s\n' "qbt_standard=${{ matrix.qbt_standard }}" >> env.custom
          printf '%s\n' "qbt_static_ish=${{ matrix.qbt_static_ish }}" >> env.custom

      - name: Host - Create docker multiarch container ${{ github.event.inputs.distinct_id }}
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker - apk update ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk update

      - name: Docker - apk install bash ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk add bash

      - name: Docker - Bootstrap ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} -bs-a

      - name: Docker - Copy repo patches to build folder ${{ github.event.inputs.distinct_id }}
        run: if [[ -d patches ]]; then docker exec -w /root multiarch cp -r patches/* /root/${{ env.qbt_build_dir }}/patches; fi

      - name: Docker - zlib-ng ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} zlib

      - name: Docker - iconv ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} iconv

      - name: Docker - icu ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} icu

      - name: Docker - openssl ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} openssl

      - name: Docker - boost ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} boost

      - name: Docker - libtorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} libtorrent

      - name: Docker - double_conversion ${{ github.event.inputs.distinct_id }}
        if: matrix.qbt_build_tool == ''
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} double_conversion

      - name: Docker - qtbase ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qtbase

      - name: Docker - qttools ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qttools

      - name: Docker - qbittorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qbittorrent

      - name: Host - qBittorrent v5 transition
        run: |
          if [[ -f ${{ env.qbt_build_dir }}/release_info/disable-qt5 ]]; then
            printf '%s\n' "disable_qt5=yes" >> $GITHUB_ENV
          fi

      - name: Docker - Set release asset name ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        run: docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch mv -f qbittorrent-nox ${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox

      - name: Generate artifact attestation  ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "${{ env.qbt_build_dir }}/completed/${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox"

      - name: Docker - Release Info ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        run: docker exec -w /root/${{ env.qbt_build_dir }}/release_info multiarch bash -c 'mv *.md *.json '/root/${{ env.qbt_build_dir }}/completed''

      - name: Docker - upx compression ${{ github.event.inputs.distinct_id }}
        if: inputs.upx == 'true'
        run: |
          docker exec -w /root multiarch apk add upx
          docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch upx --brute --no-lzma ${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox

      - name: Host - Upload libtorrent-v${{ matrix.qbt_libtorrent_version }}-qbittorrent-nox and release info artifact ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: libtorrent-v${{ matrix.qbt_libtorrent_version }}-${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox
          path: |
            ${{ env.qbt_build_dir }}/completed/*
            !${{ env.qbt_build_dir }}/completed/*.png

      - name: Host - Upload cmake graphs artifact ${{ github.event.inputs.distinct_id }}
        if: matrix.qbt_build_tool == '' && env.disable_qt5 != 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.qbt_cross_name }}-libtorrent-v${{ matrix.qbt_libtorrent_version }}-graphs"
          path: "${{ env.qbt_build_dir }}/completed/*.png"
