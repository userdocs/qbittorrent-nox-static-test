# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition
name: ci - alpine

on:
  workflow_call:
    inputs:
      artifacts:
        type: string
      workflows:
        type: string
      debug:
        type: string
      upx:
        type: string
      custom:
        type: string
      os_id:
        type: string
      os_version_id:
        type: string
      qbt_qt_version_name:
        type: string
      qbt_libtorrent_version:
        type: string
      qbt_qt_version:
        type: string
      qbt_build_tool:
        type: string
      qbt_cross_name:
        type: string
      qbt_patches_url:
        type: string
      qbt_skip_icu:
        type: string
      qbt_boost_tag:
        type: string
      qbt_libtorrent_tag:
        type: string
      qbt_qt_tag:
        type: string
      qbt_qbittorrent_tag:
        type: string
      qbt_libtorrent_master_jamfile:
        type: string
      qbt_workflow_files:
        type: string
      qbt_workflow_artifacts:
        type: string
      qbt_cache_dir:
        type: string
      qbt_optimise_strip:
        type: string
      qbt_build_debug:
        type: string
      qbt_revision_url:
        type: string
      qbt_standard:
        type: string
      qbt_static_ish:
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    name: "${{ inputs.qbt_cross_name }}-${{ inputs.qbt_qt_version_name }}libtorrent-v${{ inputs.qbt_libtorrent_version }}"
    env:
      qbt_build_dir: "qbt-build"

    steps:
      - name: Checkout ${{ github.event.inputs.distinct_id }}
        uses: actions/checkout@v4

      - name: Host - phased updates ${{ github.event.inputs.distinct_id }}
        run: printf '%s\n' 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - update ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get update

      - name: Host - upgrade ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support ${{ github.event.inputs.distinct_id }}
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Host - Create Docker template env file ${{ github.event.inputs.distinct_id }}
        run: |
          printf '%s\n' "qbt_libtorrent_version=${{ inputs.qbt_libtorrent_version }}" > env.custom
          printf '%s\n' "qbt_qt_version=${{ inputs.qbt_qt_version }}" >> env.custom
          printf '%s\n' "qbt_build_tool=${{ inputs.qbt_build_tool }}" >> env.custom
          printf '%s\n' "qbt_cross_name=${{ inputs.qbt_cross_name }}" >> env.custom
          printf '%s\n' "qbt_patches_url=${{ github.repository }}" >> env.custom
          printf '%s\n' "qbt_skip_icu=${{ inputs.qbt_skip_icu }}" >> env.custom
          printf '%s\n' "qbt_boost_tag=${{ inputs.qbt_boost_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_tag=${{ inputs.qbt_libtorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_qt_tag=${{ inputs.qbt_qt_tag }}" >> env.custom
          printf '%s\n' "qbt_qbittorrent_tag=${{ inputs.qbt_qbittorrent_tag }}" >> env.custom
          printf '%s\n' "qbt_libtorrent_master_jamfile=${{ inputs.qbt_libtorrent_master_jamfile }}" >> env.custom
          printf '%s\n' "qbt_workflow_files=${{ inputs.qbt_workflow_files }}" >> env.custom
          printf '%s\n' "qbt_workflow_artifacts=${{ inputs.qbt_workflow_artifacts }}" >> env.custom
          printf '%s\n' "qbt_cache_dir=${{ inputs.qbt_cache_dir }}" >> env.custom
          printf '%s\n' "qbt_optimise_strip=${{ inputs.qbt_optimise_strip }}" >> env.custom
          printf '%s\n' "qbt_build_debug=${{ inputs.qbt_build_debug }}" >> env.custom
          printf '%s\n' "qbt_revision_url=${{ github.repository }}" >> env.custom
          printf '%s\n' "qbt_standard=${{ inputs.qbt_standard }}" >> env.custom
          printf '%s\n' "qbt_static_ish=${{ inputs.qbt_static_ish }}" >> env.custom

      - name: Host - Create docker multiarch container ${{ github.event.inputs.distinct_id }}
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ inputs.os_id }}:${{ inputs.os_version_id }}

      - name: Docker - apk update ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk update

      - name: Docker - apk install bash ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk add bash

      - name: Docker - Bootstrap ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} -bs-a

      - name: Docker - Copy repo patches to build folder ${{ github.event.inputs.distinct_id }}
        run: if [[ -d patches ]]; then docker exec -w /root multiarch cp -r patches/* /root/${{ env.qbt_build_dir }}/patches; fi

      - name: Docker - zlib-ng ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} zlib

      - name: Docker - iconv ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} iconv

      - name: Docker - icu ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} icu

      - name: Docker - openssl ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} openssl

      - name: Docker - boost ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} boost

      - name: Docker - libtorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} libtorrent

      - name: Docker - double_conversion ${{ github.event.inputs.distinct_id }}
        if: matrix.qbt_build_tool == ''
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} double_conversion

      - name: Docker - qtbase ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qtbase

      - name: Docker - qttools ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qttools

      - name: Docker - qbittorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh ${{ inputs.custom }} qbittorrent

      - name: Host - qBittorrent v5 transition
        run: |
          if [[ -f ${{ env.qbt_build_dir }}/release_info/disable-qt5 ]]; then
            printf '%s\n' "disable_qt5=yes" >> $GITHUB_ENV
          fi

      - name: Docker - Set release asset name ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        run: docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch mv -f qbittorrent-nox ${{ inputs.qbt_cross_name }}-${{ inputs.qbt_qt_version_name }}qbittorrent-nox

      - name: Generate artifact attestation  ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "${{ env.qbt_build_dir }}/completed/${{ inputs.qbt_cross_name }}-${{ inputs.qbt_qt_version_name }}qbittorrent-nox"

      - name: Docker - Release Info ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        run: docker exec -w /root/${{ env.qbt_build_dir }}/release_info multiarch bash -c 'mv *.md *.json '/root/${{ env.qbt_build_dir }}/completed''

      - name: Docker - upx compression ${{ github.event.inputs.distinct_id }}
        if: inputs.upx == 'true'
        run: |
          docker exec -w /root multiarch apk add upx
          docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch upx --brute --no-lzma ${{ inputs.qbt_cross_name }}-${{ inputs.qbt_qt_version_name }}qbittorrent-nox

      - name: Host - Upload libtorrent-v${{ inputs.qbt_libtorrent_version }}-qbittorrent-nox and release info artifact ${{ github.event.inputs.distinct_id }}
        if: env.disable_qt5 != 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: libtorrent-v${{ inputs.qbt_libtorrent_version }}-${{ inputs.qbt_cross_name }}-${{ inputs.qbt_qt_version_name }}qbittorrent-nox
          path: |
            ${{ env.qbt_build_dir }}/completed/*
            !${{ env.qbt_build_dir }}/completed/*.png

      - name: Host - Upload cmake graphs artifact ${{ github.event.inputs.distinct_id }}
        if: matrix.qbt_build_tool == '' && env.disable_qt5 != 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ inputs.qbt_cross_name }}-libtorrent-v${{ inputs.qbt_libtorrent_version }}-graphs"
          path: "${{ env.qbt_build_dir }}/completed/*.png"
